stages:
  - build



build-pi:
  stage: build
  tags:
    - arm
    - raspberrypi
    - native
  script:
    - mkdir arm
    - cd arm
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ENCRYPT=ON ..
    - make
    - rm CMakeCache.txt
    - rm Makefile
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_DECRYPT=ON ..
    - make
  artifacts:
    paths:
      - arm/crye
      - arm/cryd
    


build-gcc:
  image: gcc
  stage: build
  tags:
    - linux
    - docker
  before_script:
    - apt update
    - apt -y install make cmake
    - apt -y install libboost-system1.67-dev libboost-date-time1.67-dev
    - apt -y install libboost-filesystem1.67-dev libboost-program-options1.67-dev
    - apt -y install libgcrypt20-dev
  script:
    - mkdir nix
    - cd nix
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ENCRYPT=ON ..
    - make
    - rm CMakeCache.txt
    - rm Makefile
    - cmake -DCMAKE_BUILD_TYPE=Relase -DBUILD_DECRYPT=ON ..
    - make
  artifacts:
    paths:
      - nix/crye
      - nix/cryd
      #- mybinary
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"


build-win:
  stage: build
  tags:
    - win10
    - vs2019
    - native
  before_script:
    - mkdir windows
    - cd windows
    - cmd /c "echo call vs 2019 > mybuild.bat"
    - cmd /c 'echo cmake -G "NMake Makefiles" -DBUILD_ENCRYPT=ON .. >> mybuild.bat'
    - cmd /c "echo make >> mybuild.bat"
    - cmd /c "echo del CMakeCache.txt Makefile >> mybuild.bat"
    - cmd /c 'echo cmake -G "NMake Makefiles" -DBUILD_DECRYPT=ON .. >> mybuild.bat'
    - cmd /c "echo make >> mybuild.bat"
  script:
    - cmd /c "mybuild.bat"
  artifacts:
    paths:
      - windows/crye
      - windows/cryd
